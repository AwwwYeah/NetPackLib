Библиотека по созданию сетевых пакетов.

Включает в себя функции для создания заголовков сетевых протоколов, перечисленных ниже:

-Ethernet
-IP
-UDP
-BOOTP
-DHCP

 ________________________________________________________________
|																 |
|--------Описание функций, присутствующих в библиотеке---------- |
|________________________________________________________________|

# Работа с сетевым интерфейсом

1) u_char *InitInterface(void);

   Получает имя первого активного интерфейса. 
   
   Возвращаемое значение: 1) Строка(имя интерфейса), 2) NULL в случае ошибки

2) struct if_data *GetIfData(const u_char *if_name, u_char *err);

   Получает данные сетевого интерфейса, таких как: IP адрес, MAC адрес и индекс.

   struct if_data
   {
    	u_char if_mac[ETH_ALEN];
    	u_char if_ip[4];
    	u_int if_index;
   };

   где if_mac: MAC-адрес, if_ip: IP-адрес, if_index: индекс

   Аргументы: 1) Строка(имя интерфейса), 2) Память для хранения ошибок.

   Возвращаемое значение: 1) Указатель на структуру 2) NULL в случае ошибки.



3) int CreateRawSock(const struct if_data *md, u_short protocol, u_char *err);

   Открывает сырой сокет.

   Аргументы: 1) Указатель на структуру if_data с уже имеющимися в ней данными,
   			  2) Протокол(ETH_P_IP, ...)(/usr/include/linux/if_ether.h)
   			  3) Буфер под ошибки

   Возвращаемое значение: 1) Дескриптор сокета, 2) -1 в случае ошибки

   Пример работы:

   #include <stdio.h>
   #include <stdlib.h>
   #include <unistd.h>
   #include "infsock/interface.h"
   #include "infsock/socket.h"

   int main(void)
   {
   	    u_char *iname;
   		struct if_data *ifd;
   		int sock;
   		u_char errbuf[256];

   		// Получаем имя интерфейса
   		iname = InitInterface();

   		if(iname == NULL)
   		{
   		   printf("No active interfaces\n");

   	       exit(EXIT_FAILURE);
  	    }

        // Получаем данные интерфейса
        ifd = GetIfData(iname, errbuf);

        if(ifd == NULL)
        {
   	       printf("%s\n", errbuf);

   	       exit(EXIT_FAILURE);
        }

        // Открываем сокет
        sock = CreateRawSock(ifd, ETH_P_IP, errbuf);

        if(sock == -1)
        {
        	printf("%s\n", errbuf);

        	exit(EXIT_FAILURE);
        }

        /* ....... */
   }

# Создание заголовков сетевых протоколов

!!!ВАЖНО: ПАМЯТЬ ПОД ЗАГОЛОВКИ ВЫДЕЛЯЕТСЯ ДИНАМИЧЕСКИ, ПОСЛЕ ИСПОЛЬЗОВАНИЯ ФУНКЦИЙ
НЕОБХОДИМО ОСВОБОДИТЬ ПАМЯТЬ С ПОМОЩЬЮ "malloc()".

1) struct ethhdr *CreateEthLayer(u_char *dst, u_char *src, u_short prot);

   Аргументы: 1) Указатель на буфер, содержащий MAC адрес получателя
   			  2) Указатель на буфер, содерюащий MAC адрес отправителя
   			  3) Протокол, опредленый в "/usr/include/linux/if_ether.h"

   Возвращаемое значение: адрес структуры ethhdr(который и является заголовком)












   





